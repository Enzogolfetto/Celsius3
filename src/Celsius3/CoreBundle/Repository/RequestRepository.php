<?php

/*
 * Celsius3 - Order management
 * Copyright (C) 2014 PrEBi <info@prebi.unlp.edu.ar>
 *
 * This file is part of Celsius3.
 *
 * Celsius3 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Celsius3 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Celsius3.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Celsius3\CoreBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Doctrine\ODM\MongoDB\Query\Builder;
use Celsius3\CoreBundle\Document\Instance;
use Celsius3\CoreBundle\Manager\UserManager;

/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends DocumentRepository
{
    public function countByMonthAndYear() {
        
        $qb = $this->createQueryBuilder();
        $requests = $qb
            ->map('function() { emit( , 1) }')    
            ->reduce('function(k, vals) {
                var sum = 0;
                for (var i in vals) {
                    sum += vals[i];
                }
                return sum;
            }')->getQuery()->execute()->toArray();
        
        $string = '';
        foreach ($requests as $r) {
            $string .= $r['_id'] . '-' . $r['value'] . '<br>';
        }
        return $string;
    }
    
    public function countActiveUsers() {
        $qb = $this->createQueryBuilder();
        $query = $qb->hydrate(false)
                ->map('function(){emit({
                        instance_id: this.instance.$id,
                            year: this.createdAt.getFullYear(),
                            month:this.createdAt.getMonth()}, 
                        { count: 1 , users: [this.owner.$id]})}')
                ->reduce('function(k,v){ 
                            var ret = { count: 0 , users: []};
                            for ( var i = 0; i < v.length; i++ ) {
                                 ret.count += v[i].count;
                                 v[i].users.forEach(function(val) {
                                     ret.users.push(val);
                                 });
                            }
                            return ret;
                        }')
                ->getQuery();
        return $query->execute()->toArray();
    }
}