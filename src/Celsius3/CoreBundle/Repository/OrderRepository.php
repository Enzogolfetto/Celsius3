<?php

/*
 * Celsius3 - Order management
 * Copyright (C) 2014 PrEBi <info@prebi.unlp.edu.ar>
 *
 * This file is part of Celsius3.
 *
 * Celsius3 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Celsius3 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Celsius3.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Celsius3\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Celsius3\CoreBundle\Entity\BaseUser;
use Celsius3\CoreBundle\Entity\Instance;
use Celsius3\CoreBundle\Manager\StateManager;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{

    public function findByTerm($term, Instance $instance = null, $in = array(), $limit = null)
    {
        $qb = $this->createQueryBuilder('o');

        if (count($in) > 0) {
            $secondary = array();
            foreach ($in as $repository => $term) {
                $secondary = array_keys($this->getEntityManager()
                                ->getRepository('Celsius3CoreBundle:' . $repository)
                                ->findByTerm($term, $instance)
                                ->getQuery()->getResult());
            }
            $qb->andWhere($qb->expr()->in('owner', $secundary));
        } else {
            $qb = $qb->join('o.materialData','md')
                    ->orWhere($qb->expr()->like('o.code',$qb->expr()->literal('%'.$term.'%')))
                    ->orWhere($qb->expr()->like('md.title',$qb->expr()->literal('%'.$term.'%')))
                    ->orWhere($qb->expr()->like('md.authors',$qb->expr()->literal('%'.$term.'%')))
                    ->orWhere($qb->expr()->like('md.year',$qb->expr()->literal('%'.$term.'%')));
        }

        if (!is_null($instance)) {
            $requests = array_values(array_map(function($request) {
                        return $request['orderp'];
                    }, $this->getEntityManager()->getRepository('Celsius3CoreBundle:Request')
                                    ->createQueryBuilder('r')
                                    ->select('IDENTITY(r.order) orderp ')
                                    ->where('r.instance = :instance')->setParameter('instance',$instance)
                                    ->getQuery()->getResult()));

            $qb = $qb->join('o.requests','rs')->andWhere($qb->expr()->in('rs',$requests));
        }

        if (!is_null($limit)) {
            $qb = $qb->setMaxResults($limit);
        }

        return $qb->getQuery();
    }

    public function findForInstance(Instance $instance, BaseUser $user = null, $state = null, BaseUser $owner = null, $orderType = null)
    {
        $qb = $this->createQueryBuilder('o')
                ->join('o.requests', 'r')
                ->join('r.states', 's')
                ->join('o.materialData', 'm')
                ->where('s.isCurrent = true')
                ->andWhere('s.instance = :instance_id')
                ->setParameter('instance_id', $instance->getId());

        if (is_array($state)) {
            $qb = $qb->andWhere('s.type IN (:state_types)')
                    ->setParameter('state_types', $state);
        } else {
            $qb = $qb->andWhere('s.type = :state_type')
                    ->setParameter('state_type', $state);
        }

        if (!($orderType === 'allTypes') && !(is_null($orderType))) {
            $qb = $qb->andWhere('r.type = :order_type')
                    ->setParameter('order_type', $orderType);
        }

        if (!is_null($user)) {
            $qb = $qb->andWhere('(r.operator = :user_id OR r.operator IS NULL)')
                    ->setParameter('user_id', $user->getId());
        }

        if (!is_null($owner)) {
            $qb = $qb->andWhere('r.owner = :owner')
                    ->setParameter('owner', $owner->getId());
        }

        return $qb->getQuery();
    }

    public function findOneForInstance($id, Instance $instance)
    {
        return $this->getEntityManager()
                        ->getRepository('Celsius3CoreBundle:Order')
                        ->createQueryBuilder('o')
                        ->join('o.requests', 'r')
                        ->where('o.id = :id')
                        ->andWhere('r.instance = :instance_id')
                        ->setParameter('id', $id)
                        ->setParameter('instance_id', $instance->getId());
    }

    public function findByStateType($type, $startDate, BaseUser $user = null, Instance $instance = null)
    {
        $states = $this->getEntityManager()
                        ->getRepository('Celsius3CoreBundle:State')
                        ->createQueryBuilder()
                        ->hydrate(false)
                        ->select('order')
                        ->field('type')->equals($type)
                        ->field('owner')->equals($user->getId())
                        ->field('date')->gte(new \DateTime($startDate));

        $qb = $this->createQueryBuilder()
                        ->field('id')->in(array_map(array($this, 'getIds'), $states->getQuery()->execute()->toArray()));

        return $qb->getQuery()->execute();
    }

    public function addFindByStateType(array $types, Builder $query, Instance $instance = null, BaseUser $user = null)
    {
        $states = $this->getEntityManager()
                        ->getRepository('Celsius3CoreBundle:State')
                        ->createQueryBuilder()
                        ->hydrate(false)
                        ->select('order')
                        ->field('isCurrent')->equals(true)
                        ->field('type')->in($types);

        if (!is_null($instance)) {
            $states = $states->field('instance')->equals($instance->getId());
        }

        if ($user) {
            $states = $states->addOr($states->expr()->field('owner')->equals($user->getId()))
                    ->addOr($states->expr()->field('librarian')->equals($user->getId()));
        }

        return $query->field('id')->in(array_map(array($this, 'getIds'), $states->getQuery()->execute()->toArray()));
    }

    public function findActiveForUser(BaseUser $user, Instance $instance)
    {
        $qb = $this->createQueryBuilder();

        return $this->addFindByStateType(array(
                            StateManager::STATE__CREATED,
                            StateManager::STATE__SEARCHED,
                            StateManager::STATE__REQUESTED,
                            StateManager::STATE__APPROVAL_PENDING,
                            StateManager::STATE__RECEIVED,
                                ), $qb, $instance, $user)
                        ->getQuery()
                        ->execute();
    }
}
