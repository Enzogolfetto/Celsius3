<?php

namespace Celsius3\CoreBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Doctrine\ODM\MongoDB\Query\Builder;
use Celsius3\CoreBundle\Document\BaseUser;
use Celsius3\CoreBundle\Document\Instance;
use Celsius3\CoreBundle\Manager\StateManager;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends DocumentRepository
{

    protected function getIds($value)
    {
        return $value['order']['$id'];
    }

    public function findByTerm($term, Instance $instance = null, $in = array(), $limit = null)
    {
        $qb = $this->createQueryBuilder();

        if (!empty($in)) {
            $secondary = array();
            foreach ($in as $repository => $term) {
                $secondary = array_keys(
                        $this->getDocumentManager()
                                ->getRepository(
                                        'Celsius3CoreBundle:' . $repository)
                                ->findByTerm($term, $instance)->execute()
                                ->toArray());
            }

            $qb = $qb->field('owner.id')->in($secondary);
        } else {
            $expr = new \MongoRegex('/.*' . $term . '.*/i');
            $qb = $qb->addOr($qb->expr()->field('code')->equals(intval($term)))
                    ->addOr(
                            $qb->expr()->field('materialData.title')
                            ->equals($expr))
                    ->addOr(
                            $qb->expr()->field('materialData.authors')
                            ->equals($expr))
                    ->addOr(
                    $qb->expr()->field('materialData.year')
                    ->equals($expr));
        }

        if (!is_null($instance))
            $qb = $qb->field('instance.id')->equals($instance->getId());

        if (!is_null($limit))
            $qb = $qb->limit(10);

        return $qb->getQuery();
    }

    public function findForInstance(Instance $instance)
    {
        $stateType = $this->getDocumentManager()
                ->getRepository('Celsius3CoreBundle:StateType')
                ->findOneBy(array('name' => StateManager::STATE__CREATED));

        $order_ids = array_map(array($this, 'getIds'), $this->getDocumentManager()
                        ->getRepository('Celsius3CoreBundle:State')
                        ->createQueryBuilder()->hydrate(false)->select('order')
                        ->field('type.id')->equals($stateType->getId())
                        ->field('instance.id')->equals($instance->getId())
                        ->getQuery()->execute()->toArray());

        return $this->createQueryBuilder()->field('id')->in($order_ids);
    }

    public function findOneForInstance($id, Instance $instance)
    {
        $stateType = $this->getDocumentManager()
                ->getRepository('Celsius3CoreBundle:StateType')
                ->findOneBy(array('name' => StateManager::STATE__CREATED));

        $order_id = $this->getDocumentManager()
                        ->getRepository('Celsius3CoreBundle:State')
                        ->createQueryBuilder()->hydrate(false)->select('order')
                        ->field('order.id')->equals($id)->field('type.id')
                        ->equals($stateType->getId())->field('instance.id')
                        ->equals($instance->getId())->getQuery()->getSingleResult();

        return $this->createQueryBuilder()->field('id')
                        ->equals($order_id['order']['$id']);
    }

    public function findByStateType($type, $startDate, BaseUser $user = null, Instance $instance = null)
    {
        $stateType = $this->getDocumentManager()
                ->getRepository('Celsius3CoreBundle:StateType')
                ->createQueryBuilder()
                ->select('id')
                ->field('name')->equals($type)
                ->getQuery()
                ->getSingleResult();

        $states = $this->getDocumentManager()
                        ->getRepository('Celsius3CoreBundle:State')
                        ->createQueryBuilder()
                        ->hydrate(false)
                        ->select('order')
                        ->field('isCurrent')->equals(true)
                        ->field('type.id')->equals($stateType->getId());

        if (!is_null($instance)) {
            $states = $states->field('instance.id')->equals($instance->getId());
        }
        
        if (!is_null($startDate)) {
            $states = $states->field('created')->gte($startDate);
        }

        $qb = $this->createQueryBuilder()
                        ->field('id')->in(array_map(array($this, 'getIds'), $states->getQuery()->execute()->toArray()));

        if (!is_null($user)) {
            $qb = $qb->field('owner.id')->equals($user->getId());
        }

        return $qb->getQuery()
                        ->execute();
    }

    public function addFindByStateType(array $types, Builder $query, Instance $instance = null)
    {
        $stateTypes = array_keys($this->getDocumentManager()
                        ->getRepository('Celsius3CoreBundle:StateType')
                        ->createQueryBuilder()->hydrate(false)->select('id')
                        ->field('name')->in($types)->getQuery()->execute()
                        ->toArray());

        $states = $this->getDocumentManager()
                ->getRepository('Celsius3CoreBundle:State')
                ->createQueryBuilder()->hydrate(false)->select('order')
                ->field('isCurrent')->equals(true)->field('type.id')
                ->in($stateTypes);

        if (!is_null($instance)) {
            $states = $states->field('instance.id')->equals($instance->getId());
        }

        return $query->field('id')->in(array_map(array($this, 'getIds'), $states->getQuery()->execute()->toArray()));
    }

}
